// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: moniter.proto
// Original file comments:
// Copyright 2015 gRPC authors.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_moniter_2eproto__INCLUDED
#define GRPC_moniter_2eproto__INCLUDED

#include "moniter.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace moniter {

// Computer status monitering service
class MoniterService final {
 public:
  static constexpr char const* service_full_name() {
    return "moniter.MoniterService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status current_memory_moniter_method(::grpc::ClientContext* context, const ::moniter::MemoryRequest& request, ::moniter::MemoryReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::moniter::MemoryReply>> Asynccurrent_memory_moniter_method(::grpc::ClientContext* context, const ::moniter::MemoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::moniter::MemoryReply>>(Asynccurrent_memory_moniter_methodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::moniter::MemoryReply>> PrepareAsynccurrent_memory_moniter_method(::grpc::ClientContext* context, const ::moniter::MemoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::moniter::MemoryReply>>(PrepareAsynccurrent_memory_moniter_methodRaw(context, request, cq));
    }
    virtual ::grpc::Status current_cpu_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::CpuMoniterRequest& request, ::moniter::CpuMoniterReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::moniter::CpuMoniterReply>> Asynccurrent_cpu_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::CpuMoniterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::moniter::CpuMoniterReply>>(Asynccurrent_cpu_usage_moniter_methodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::moniter::CpuMoniterReply>> PrepareAsynccurrent_cpu_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::CpuMoniterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::moniter::CpuMoniterReply>>(PrepareAsynccurrent_cpu_usage_moniter_methodRaw(context, request, cq));
    }
    virtual ::grpc::Status current_disk_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::DiskMoniterRequest& request, ::moniter::DiskMoniterReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::moniter::DiskMoniterReply>> Asynccurrent_disk_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::DiskMoniterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::moniter::DiskMoniterReply>>(Asynccurrent_disk_usage_moniter_methodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::moniter::DiskMoniterReply>> PrepareAsynccurrent_disk_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::DiskMoniterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::moniter::DiskMoniterReply>>(PrepareAsynccurrent_disk_usage_moniter_methodRaw(context, request, cq));
    }
    virtual ::grpc::Status current_process_moniter_method(::grpc::ClientContext* context, const ::moniter::ProcessMoniterRequest& request, ::moniter::ProcessMoniterReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::moniter::ProcessMoniterReply>> Asynccurrent_process_moniter_method(::grpc::ClientContext* context, const ::moniter::ProcessMoniterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::moniter::ProcessMoniterReply>>(Asynccurrent_process_moniter_methodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::moniter::ProcessMoniterReply>> PrepareAsynccurrent_process_moniter_method(::grpc::ClientContext* context, const ::moniter::ProcessMoniterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::moniter::ProcessMoniterReply>>(PrepareAsynccurrent_process_moniter_methodRaw(context, request, cq));
    }
    virtual ::grpc::Status selected_process_moniter_method(::grpc::ClientContext* context, const ::moniter::SelectedProcessMoniterRequest& request, ::moniter::SelectedProcessMoniterReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::moniter::SelectedProcessMoniterReply>> Asyncselected_process_moniter_method(::grpc::ClientContext* context, const ::moniter::SelectedProcessMoniterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::moniter::SelectedProcessMoniterReply>>(Asyncselected_process_moniter_methodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::moniter::SelectedProcessMoniterReply>> PrepareAsyncselected_process_moniter_method(::grpc::ClientContext* context, const ::moniter::SelectedProcessMoniterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::moniter::SelectedProcessMoniterReply>>(PrepareAsyncselected_process_moniter_methodRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void current_memory_moniter_method(::grpc::ClientContext* context, const ::moniter::MemoryRequest* request, ::moniter::MemoryReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void current_memory_moniter_method(::grpc::ClientContext* context, const ::moniter::MemoryRequest* request, ::moniter::MemoryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void current_cpu_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::CpuMoniterRequest* request, ::moniter::CpuMoniterReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void current_cpu_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::CpuMoniterRequest* request, ::moniter::CpuMoniterReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void current_disk_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::DiskMoniterRequest* request, ::moniter::DiskMoniterReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void current_disk_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::DiskMoniterRequest* request, ::moniter::DiskMoniterReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void current_process_moniter_method(::grpc::ClientContext* context, const ::moniter::ProcessMoniterRequest* request, ::moniter::ProcessMoniterReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void current_process_moniter_method(::grpc::ClientContext* context, const ::moniter::ProcessMoniterRequest* request, ::moniter::ProcessMoniterReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void selected_process_moniter_method(::grpc::ClientContext* context, const ::moniter::SelectedProcessMoniterRequest* request, ::moniter::SelectedProcessMoniterReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void selected_process_moniter_method(::grpc::ClientContext* context, const ::moniter::SelectedProcessMoniterRequest* request, ::moniter::SelectedProcessMoniterReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::moniter::MemoryReply>* Asynccurrent_memory_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::MemoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::moniter::MemoryReply>* PrepareAsynccurrent_memory_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::MemoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::moniter::CpuMoniterReply>* Asynccurrent_cpu_usage_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::CpuMoniterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::moniter::CpuMoniterReply>* PrepareAsynccurrent_cpu_usage_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::CpuMoniterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::moniter::DiskMoniterReply>* Asynccurrent_disk_usage_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::DiskMoniterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::moniter::DiskMoniterReply>* PrepareAsynccurrent_disk_usage_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::DiskMoniterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::moniter::ProcessMoniterReply>* Asynccurrent_process_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::ProcessMoniterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::moniter::ProcessMoniterReply>* PrepareAsynccurrent_process_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::ProcessMoniterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::moniter::SelectedProcessMoniterReply>* Asyncselected_process_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::SelectedProcessMoniterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::moniter::SelectedProcessMoniterReply>* PrepareAsyncselected_process_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::SelectedProcessMoniterRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status current_memory_moniter_method(::grpc::ClientContext* context, const ::moniter::MemoryRequest& request, ::moniter::MemoryReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::moniter::MemoryReply>> Asynccurrent_memory_moniter_method(::grpc::ClientContext* context, const ::moniter::MemoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::moniter::MemoryReply>>(Asynccurrent_memory_moniter_methodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::moniter::MemoryReply>> PrepareAsynccurrent_memory_moniter_method(::grpc::ClientContext* context, const ::moniter::MemoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::moniter::MemoryReply>>(PrepareAsynccurrent_memory_moniter_methodRaw(context, request, cq));
    }
    ::grpc::Status current_cpu_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::CpuMoniterRequest& request, ::moniter::CpuMoniterReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::moniter::CpuMoniterReply>> Asynccurrent_cpu_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::CpuMoniterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::moniter::CpuMoniterReply>>(Asynccurrent_cpu_usage_moniter_methodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::moniter::CpuMoniterReply>> PrepareAsynccurrent_cpu_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::CpuMoniterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::moniter::CpuMoniterReply>>(PrepareAsynccurrent_cpu_usage_moniter_methodRaw(context, request, cq));
    }
    ::grpc::Status current_disk_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::DiskMoniterRequest& request, ::moniter::DiskMoniterReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::moniter::DiskMoniterReply>> Asynccurrent_disk_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::DiskMoniterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::moniter::DiskMoniterReply>>(Asynccurrent_disk_usage_moniter_methodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::moniter::DiskMoniterReply>> PrepareAsynccurrent_disk_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::DiskMoniterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::moniter::DiskMoniterReply>>(PrepareAsynccurrent_disk_usage_moniter_methodRaw(context, request, cq));
    }
    ::grpc::Status current_process_moniter_method(::grpc::ClientContext* context, const ::moniter::ProcessMoniterRequest& request, ::moniter::ProcessMoniterReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::moniter::ProcessMoniterReply>> Asynccurrent_process_moniter_method(::grpc::ClientContext* context, const ::moniter::ProcessMoniterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::moniter::ProcessMoniterReply>>(Asynccurrent_process_moniter_methodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::moniter::ProcessMoniterReply>> PrepareAsynccurrent_process_moniter_method(::grpc::ClientContext* context, const ::moniter::ProcessMoniterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::moniter::ProcessMoniterReply>>(PrepareAsynccurrent_process_moniter_methodRaw(context, request, cq));
    }
    ::grpc::Status selected_process_moniter_method(::grpc::ClientContext* context, const ::moniter::SelectedProcessMoniterRequest& request, ::moniter::SelectedProcessMoniterReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::moniter::SelectedProcessMoniterReply>> Asyncselected_process_moniter_method(::grpc::ClientContext* context, const ::moniter::SelectedProcessMoniterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::moniter::SelectedProcessMoniterReply>>(Asyncselected_process_moniter_methodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::moniter::SelectedProcessMoniterReply>> PrepareAsyncselected_process_moniter_method(::grpc::ClientContext* context, const ::moniter::SelectedProcessMoniterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::moniter::SelectedProcessMoniterReply>>(PrepareAsyncselected_process_moniter_methodRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void current_memory_moniter_method(::grpc::ClientContext* context, const ::moniter::MemoryRequest* request, ::moniter::MemoryReply* response, std::function<void(::grpc::Status)>) override;
      void current_memory_moniter_method(::grpc::ClientContext* context, const ::moniter::MemoryRequest* request, ::moniter::MemoryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void current_cpu_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::CpuMoniterRequest* request, ::moniter::CpuMoniterReply* response, std::function<void(::grpc::Status)>) override;
      void current_cpu_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::CpuMoniterRequest* request, ::moniter::CpuMoniterReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void current_disk_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::DiskMoniterRequest* request, ::moniter::DiskMoniterReply* response, std::function<void(::grpc::Status)>) override;
      void current_disk_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::DiskMoniterRequest* request, ::moniter::DiskMoniterReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void current_process_moniter_method(::grpc::ClientContext* context, const ::moniter::ProcessMoniterRequest* request, ::moniter::ProcessMoniterReply* response, std::function<void(::grpc::Status)>) override;
      void current_process_moniter_method(::grpc::ClientContext* context, const ::moniter::ProcessMoniterRequest* request, ::moniter::ProcessMoniterReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void selected_process_moniter_method(::grpc::ClientContext* context, const ::moniter::SelectedProcessMoniterRequest* request, ::moniter::SelectedProcessMoniterReply* response, std::function<void(::grpc::Status)>) override;
      void selected_process_moniter_method(::grpc::ClientContext* context, const ::moniter::SelectedProcessMoniterRequest* request, ::moniter::SelectedProcessMoniterReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::moniter::MemoryReply>* Asynccurrent_memory_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::MemoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::moniter::MemoryReply>* PrepareAsynccurrent_memory_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::MemoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::moniter::CpuMoniterReply>* Asynccurrent_cpu_usage_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::CpuMoniterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::moniter::CpuMoniterReply>* PrepareAsynccurrent_cpu_usage_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::CpuMoniterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::moniter::DiskMoniterReply>* Asynccurrent_disk_usage_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::DiskMoniterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::moniter::DiskMoniterReply>* PrepareAsynccurrent_disk_usage_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::DiskMoniterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::moniter::ProcessMoniterReply>* Asynccurrent_process_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::ProcessMoniterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::moniter::ProcessMoniterReply>* PrepareAsynccurrent_process_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::ProcessMoniterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::moniter::SelectedProcessMoniterReply>* Asyncselected_process_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::SelectedProcessMoniterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::moniter::SelectedProcessMoniterReply>* PrepareAsyncselected_process_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::SelectedProcessMoniterRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_current_memory_moniter_method_;
    const ::grpc::internal::RpcMethod rpcmethod_current_cpu_usage_moniter_method_;
    const ::grpc::internal::RpcMethod rpcmethod_current_disk_usage_moniter_method_;
    const ::grpc::internal::RpcMethod rpcmethod_current_process_moniter_method_;
    const ::grpc::internal::RpcMethod rpcmethod_selected_process_moniter_method_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status current_memory_moniter_method(::grpc::ServerContext* context, const ::moniter::MemoryRequest* request, ::moniter::MemoryReply* response);
    virtual ::grpc::Status current_cpu_usage_moniter_method(::grpc::ServerContext* context, const ::moniter::CpuMoniterRequest* request, ::moniter::CpuMoniterReply* response);
    virtual ::grpc::Status current_disk_usage_moniter_method(::grpc::ServerContext* context, const ::moniter::DiskMoniterRequest* request, ::moniter::DiskMoniterReply* response);
    virtual ::grpc::Status current_process_moniter_method(::grpc::ServerContext* context, const ::moniter::ProcessMoniterRequest* request, ::moniter::ProcessMoniterReply* response);
    virtual ::grpc::Status selected_process_moniter_method(::grpc::ServerContext* context, const ::moniter::SelectedProcessMoniterRequest* request, ::moniter::SelectedProcessMoniterReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_current_memory_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_current_memory_moniter_method() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_current_memory_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status current_memory_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::MemoryRequest* /*request*/, ::moniter::MemoryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcurrent_memory_moniter_method(::grpc::ServerContext* context, ::moniter::MemoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::moniter::MemoryReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_current_cpu_usage_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_current_cpu_usage_moniter_method() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_current_cpu_usage_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status current_cpu_usage_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::CpuMoniterRequest* /*request*/, ::moniter::CpuMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcurrent_cpu_usage_moniter_method(::grpc::ServerContext* context, ::moniter::CpuMoniterRequest* request, ::grpc::ServerAsyncResponseWriter< ::moniter::CpuMoniterReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_current_disk_usage_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_current_disk_usage_moniter_method() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_current_disk_usage_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status current_disk_usage_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::DiskMoniterRequest* /*request*/, ::moniter::DiskMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcurrent_disk_usage_moniter_method(::grpc::ServerContext* context, ::moniter::DiskMoniterRequest* request, ::grpc::ServerAsyncResponseWriter< ::moniter::DiskMoniterReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_current_process_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_current_process_moniter_method() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_current_process_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status current_process_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::ProcessMoniterRequest* /*request*/, ::moniter::ProcessMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcurrent_process_moniter_method(::grpc::ServerContext* context, ::moniter::ProcessMoniterRequest* request, ::grpc::ServerAsyncResponseWriter< ::moniter::ProcessMoniterReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_selected_process_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_selected_process_moniter_method() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_selected_process_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selected_process_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::SelectedProcessMoniterRequest* /*request*/, ::moniter::SelectedProcessMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestselected_process_moniter_method(::grpc::ServerContext* context, ::moniter::SelectedProcessMoniterRequest* request, ::grpc::ServerAsyncResponseWriter< ::moniter::SelectedProcessMoniterReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_current_memory_moniter_method<WithAsyncMethod_current_cpu_usage_moniter_method<WithAsyncMethod_current_disk_usage_moniter_method<WithAsyncMethod_current_process_moniter_method<WithAsyncMethod_selected_process_moniter_method<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_current_memory_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_current_memory_moniter_method() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::moniter::MemoryRequest, ::moniter::MemoryReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::moniter::MemoryRequest* request, ::moniter::MemoryReply* response) { return this->current_memory_moniter_method(context, request, response); }));}
    void SetMessageAllocatorFor_current_memory_moniter_method(
        ::grpc::MessageAllocator< ::moniter::MemoryRequest, ::moniter::MemoryReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::moniter::MemoryRequest, ::moniter::MemoryReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_current_memory_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status current_memory_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::MemoryRequest* /*request*/, ::moniter::MemoryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* current_memory_moniter_method(
      ::grpc::CallbackServerContext* /*context*/, const ::moniter::MemoryRequest* /*request*/, ::moniter::MemoryReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_current_cpu_usage_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_current_cpu_usage_moniter_method() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::moniter::CpuMoniterRequest, ::moniter::CpuMoniterReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::moniter::CpuMoniterRequest* request, ::moniter::CpuMoniterReply* response) { return this->current_cpu_usage_moniter_method(context, request, response); }));}
    void SetMessageAllocatorFor_current_cpu_usage_moniter_method(
        ::grpc::MessageAllocator< ::moniter::CpuMoniterRequest, ::moniter::CpuMoniterReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::moniter::CpuMoniterRequest, ::moniter::CpuMoniterReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_current_cpu_usage_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status current_cpu_usage_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::CpuMoniterRequest* /*request*/, ::moniter::CpuMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* current_cpu_usage_moniter_method(
      ::grpc::CallbackServerContext* /*context*/, const ::moniter::CpuMoniterRequest* /*request*/, ::moniter::CpuMoniterReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_current_disk_usage_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_current_disk_usage_moniter_method() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::moniter::DiskMoniterRequest, ::moniter::DiskMoniterReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::moniter::DiskMoniterRequest* request, ::moniter::DiskMoniterReply* response) { return this->current_disk_usage_moniter_method(context, request, response); }));}
    void SetMessageAllocatorFor_current_disk_usage_moniter_method(
        ::grpc::MessageAllocator< ::moniter::DiskMoniterRequest, ::moniter::DiskMoniterReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::moniter::DiskMoniterRequest, ::moniter::DiskMoniterReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_current_disk_usage_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status current_disk_usage_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::DiskMoniterRequest* /*request*/, ::moniter::DiskMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* current_disk_usage_moniter_method(
      ::grpc::CallbackServerContext* /*context*/, const ::moniter::DiskMoniterRequest* /*request*/, ::moniter::DiskMoniterReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_current_process_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_current_process_moniter_method() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::moniter::ProcessMoniterRequest, ::moniter::ProcessMoniterReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::moniter::ProcessMoniterRequest* request, ::moniter::ProcessMoniterReply* response) { return this->current_process_moniter_method(context, request, response); }));}
    void SetMessageAllocatorFor_current_process_moniter_method(
        ::grpc::MessageAllocator< ::moniter::ProcessMoniterRequest, ::moniter::ProcessMoniterReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::moniter::ProcessMoniterRequest, ::moniter::ProcessMoniterReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_current_process_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status current_process_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::ProcessMoniterRequest* /*request*/, ::moniter::ProcessMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* current_process_moniter_method(
      ::grpc::CallbackServerContext* /*context*/, const ::moniter::ProcessMoniterRequest* /*request*/, ::moniter::ProcessMoniterReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_selected_process_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_selected_process_moniter_method() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::moniter::SelectedProcessMoniterRequest, ::moniter::SelectedProcessMoniterReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::moniter::SelectedProcessMoniterRequest* request, ::moniter::SelectedProcessMoniterReply* response) { return this->selected_process_moniter_method(context, request, response); }));}
    void SetMessageAllocatorFor_selected_process_moniter_method(
        ::grpc::MessageAllocator< ::moniter::SelectedProcessMoniterRequest, ::moniter::SelectedProcessMoniterReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::moniter::SelectedProcessMoniterRequest, ::moniter::SelectedProcessMoniterReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_selected_process_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selected_process_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::SelectedProcessMoniterRequest* /*request*/, ::moniter::SelectedProcessMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* selected_process_moniter_method(
      ::grpc::CallbackServerContext* /*context*/, const ::moniter::SelectedProcessMoniterRequest* /*request*/, ::moniter::SelectedProcessMoniterReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_current_memory_moniter_method<WithCallbackMethod_current_cpu_usage_moniter_method<WithCallbackMethod_current_disk_usage_moniter_method<WithCallbackMethod_current_process_moniter_method<WithCallbackMethod_selected_process_moniter_method<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_current_memory_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_current_memory_moniter_method() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_current_memory_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status current_memory_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::MemoryRequest* /*request*/, ::moniter::MemoryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_current_cpu_usage_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_current_cpu_usage_moniter_method() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_current_cpu_usage_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status current_cpu_usage_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::CpuMoniterRequest* /*request*/, ::moniter::CpuMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_current_disk_usage_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_current_disk_usage_moniter_method() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_current_disk_usage_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status current_disk_usage_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::DiskMoniterRequest* /*request*/, ::moniter::DiskMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_current_process_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_current_process_moniter_method() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_current_process_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status current_process_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::ProcessMoniterRequest* /*request*/, ::moniter::ProcessMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_selected_process_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_selected_process_moniter_method() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_selected_process_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selected_process_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::SelectedProcessMoniterRequest* /*request*/, ::moniter::SelectedProcessMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_current_memory_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_current_memory_moniter_method() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_current_memory_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status current_memory_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::MemoryRequest* /*request*/, ::moniter::MemoryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcurrent_memory_moniter_method(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_current_cpu_usage_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_current_cpu_usage_moniter_method() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_current_cpu_usage_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status current_cpu_usage_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::CpuMoniterRequest* /*request*/, ::moniter::CpuMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcurrent_cpu_usage_moniter_method(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_current_disk_usage_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_current_disk_usage_moniter_method() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_current_disk_usage_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status current_disk_usage_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::DiskMoniterRequest* /*request*/, ::moniter::DiskMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcurrent_disk_usage_moniter_method(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_current_process_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_current_process_moniter_method() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_current_process_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status current_process_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::ProcessMoniterRequest* /*request*/, ::moniter::ProcessMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcurrent_process_moniter_method(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_selected_process_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_selected_process_moniter_method() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_selected_process_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selected_process_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::SelectedProcessMoniterRequest* /*request*/, ::moniter::SelectedProcessMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestselected_process_moniter_method(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_current_memory_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_current_memory_moniter_method() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->current_memory_moniter_method(context, request, response); }));
    }
    ~WithRawCallbackMethod_current_memory_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status current_memory_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::MemoryRequest* /*request*/, ::moniter::MemoryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* current_memory_moniter_method(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_current_cpu_usage_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_current_cpu_usage_moniter_method() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->current_cpu_usage_moniter_method(context, request, response); }));
    }
    ~WithRawCallbackMethod_current_cpu_usage_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status current_cpu_usage_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::CpuMoniterRequest* /*request*/, ::moniter::CpuMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* current_cpu_usage_moniter_method(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_current_disk_usage_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_current_disk_usage_moniter_method() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->current_disk_usage_moniter_method(context, request, response); }));
    }
    ~WithRawCallbackMethod_current_disk_usage_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status current_disk_usage_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::DiskMoniterRequest* /*request*/, ::moniter::DiskMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* current_disk_usage_moniter_method(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_current_process_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_current_process_moniter_method() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->current_process_moniter_method(context, request, response); }));
    }
    ~WithRawCallbackMethod_current_process_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status current_process_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::ProcessMoniterRequest* /*request*/, ::moniter::ProcessMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* current_process_moniter_method(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_selected_process_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_selected_process_moniter_method() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->selected_process_moniter_method(context, request, response); }));
    }
    ~WithRawCallbackMethod_selected_process_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selected_process_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::SelectedProcessMoniterRequest* /*request*/, ::moniter::SelectedProcessMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* selected_process_moniter_method(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_current_memory_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_current_memory_moniter_method() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::moniter::MemoryRequest, ::moniter::MemoryReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::moniter::MemoryRequest, ::moniter::MemoryReply>* streamer) {
                       return this->Streamedcurrent_memory_moniter_method(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_current_memory_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status current_memory_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::MemoryRequest* /*request*/, ::moniter::MemoryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcurrent_memory_moniter_method(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::moniter::MemoryRequest,::moniter::MemoryReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_current_cpu_usage_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_current_cpu_usage_moniter_method() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::moniter::CpuMoniterRequest, ::moniter::CpuMoniterReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::moniter::CpuMoniterRequest, ::moniter::CpuMoniterReply>* streamer) {
                       return this->Streamedcurrent_cpu_usage_moniter_method(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_current_cpu_usage_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status current_cpu_usage_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::CpuMoniterRequest* /*request*/, ::moniter::CpuMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcurrent_cpu_usage_moniter_method(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::moniter::CpuMoniterRequest,::moniter::CpuMoniterReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_current_disk_usage_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_current_disk_usage_moniter_method() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::moniter::DiskMoniterRequest, ::moniter::DiskMoniterReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::moniter::DiskMoniterRequest, ::moniter::DiskMoniterReply>* streamer) {
                       return this->Streamedcurrent_disk_usage_moniter_method(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_current_disk_usage_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status current_disk_usage_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::DiskMoniterRequest* /*request*/, ::moniter::DiskMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcurrent_disk_usage_moniter_method(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::moniter::DiskMoniterRequest,::moniter::DiskMoniterReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_current_process_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_current_process_moniter_method() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::moniter::ProcessMoniterRequest, ::moniter::ProcessMoniterReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::moniter::ProcessMoniterRequest, ::moniter::ProcessMoniterReply>* streamer) {
                       return this->Streamedcurrent_process_moniter_method(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_current_process_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status current_process_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::ProcessMoniterRequest* /*request*/, ::moniter::ProcessMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcurrent_process_moniter_method(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::moniter::ProcessMoniterRequest,::moniter::ProcessMoniterReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_selected_process_moniter_method : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_selected_process_moniter_method() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::moniter::SelectedProcessMoniterRequest, ::moniter::SelectedProcessMoniterReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::moniter::SelectedProcessMoniterRequest, ::moniter::SelectedProcessMoniterReply>* streamer) {
                       return this->Streamedselected_process_moniter_method(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_selected_process_moniter_method() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status selected_process_moniter_method(::grpc::ServerContext* /*context*/, const ::moniter::SelectedProcessMoniterRequest* /*request*/, ::moniter::SelectedProcessMoniterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedselected_process_moniter_method(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::moniter::SelectedProcessMoniterRequest,::moniter::SelectedProcessMoniterReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_current_memory_moniter_method<WithStreamedUnaryMethod_current_cpu_usage_moniter_method<WithStreamedUnaryMethod_current_disk_usage_moniter_method<WithStreamedUnaryMethod_current_process_moniter_method<WithStreamedUnaryMethod_selected_process_moniter_method<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_current_memory_moniter_method<WithStreamedUnaryMethod_current_cpu_usage_moniter_method<WithStreamedUnaryMethod_current_disk_usage_moniter_method<WithStreamedUnaryMethod_current_process_moniter_method<WithStreamedUnaryMethod_selected_process_moniter_method<Service > > > > > StreamedService;
};

}  // namespace moniter


#endif  // GRPC_moniter_2eproto__INCLUDED
