// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: moniter.proto

#include "moniter.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace moniter {
PROTOBUF_CONSTEXPR MemoryRequest::MemoryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.virtual_memory_request_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.physical_memory_request_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avail_virtual_memory_request_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avail_physical_memory_request_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MemoryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryRequestDefaultTypeInternal() {}
  union {
    MemoryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryRequestDefaultTypeInternal _MemoryRequest_default_instance_;
PROTOBUF_CONSTEXPR MemoryReply::MemoryReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.memory_info_reply_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MemoryReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryReplyDefaultTypeInternal() {}
  union {
    MemoryReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryReplyDefaultTypeInternal _MemoryReply_default_instance_;
PROTOBUF_CONSTEXPR CpuMoniterRequest::CpuMoniterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cpu_request_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CpuMoniterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CpuMoniterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CpuMoniterRequestDefaultTypeInternal() {}
  union {
    CpuMoniterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CpuMoniterRequestDefaultTypeInternal _CpuMoniterRequest_default_instance_;
PROTOBUF_CONSTEXPR CpuMoniterReply::CpuMoniterReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cpu_reply_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CpuMoniterReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CpuMoniterReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CpuMoniterReplyDefaultTypeInternal() {}
  union {
    CpuMoniterReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CpuMoniterReplyDefaultTypeInternal _CpuMoniterReply_default_instance_;
PROTOBUF_CONSTEXPR DiskMoniterRequest::DiskMoniterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.total_disk_volume_request_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.disk_usage_request_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avail_disk_volume_request_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DiskMoniterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiskMoniterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiskMoniterRequestDefaultTypeInternal() {}
  union {
    DiskMoniterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiskMoniterRequestDefaultTypeInternal _DiskMoniterRequest_default_instance_;
PROTOBUF_CONSTEXPR DiskMoniterReply::DiskMoniterReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.disk_info_reply_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DiskMoniterReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiskMoniterReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiskMoniterReplyDefaultTypeInternal() {}
  union {
    DiskMoniterReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiskMoniterReplyDefaultTypeInternal _DiskMoniterReply_default_instance_;
PROTOBUF_CONSTEXPR ProcessMoniterRequest::ProcessMoniterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.process_info_request_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_process_info_request_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.all_process_info_request_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessMoniterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessMoniterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessMoniterRequestDefaultTypeInternal() {}
  union {
    ProcessMoniterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessMoniterRequestDefaultTypeInternal _ProcessMoniterRequest_default_instance_;
PROTOBUF_CONSTEXPR ProcessMoniterReply::ProcessMoniterReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.process_info_reply_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessMoniterReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessMoniterReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessMoniterReplyDefaultTypeInternal() {}
  union {
    ProcessMoniterReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessMoniterReplyDefaultTypeInternal _ProcessMoniterReply_default_instance_;
PROTOBUF_CONSTEXPR SelectedProcessMoniterRequest::SelectedProcessMoniterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_process_info_request_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.selected_process_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SelectedProcessMoniterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectedProcessMoniterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectedProcessMoniterRequestDefaultTypeInternal() {}
  union {
    SelectedProcessMoniterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectedProcessMoniterRequestDefaultTypeInternal _SelectedProcessMoniterRequest_default_instance_;
PROTOBUF_CONSTEXPR SelectedProcessMoniterReply::SelectedProcessMoniterReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.selected_process_info_reply_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SelectedProcessMoniterReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectedProcessMoniterReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectedProcessMoniterReplyDefaultTypeInternal() {}
  union {
    SelectedProcessMoniterReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectedProcessMoniterReplyDefaultTypeInternal _SelectedProcessMoniterReply_default_instance_;
}  // namespace moniter
static ::_pb::Metadata file_level_metadata_moniter_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_moniter_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_moniter_2eproto = nullptr;

const uint32_t TableStruct_moniter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moniter::MemoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::moniter::MemoryRequest, _impl_.virtual_memory_request_),
  PROTOBUF_FIELD_OFFSET(::moniter::MemoryRequest, _impl_.physical_memory_request_),
  PROTOBUF_FIELD_OFFSET(::moniter::MemoryRequest, _impl_.avail_virtual_memory_request_),
  PROTOBUF_FIELD_OFFSET(::moniter::MemoryRequest, _impl_.avail_physical_memory_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moniter::MemoryReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::moniter::MemoryReply, _impl_.memory_info_reply_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moniter::CpuMoniterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::moniter::CpuMoniterRequest, _impl_.cpu_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moniter::CpuMoniterReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::moniter::CpuMoniterReply, _impl_.cpu_reply_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moniter::DiskMoniterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::moniter::DiskMoniterRequest, _impl_.total_disk_volume_request_),
  PROTOBUF_FIELD_OFFSET(::moniter::DiskMoniterRequest, _impl_.disk_usage_request_),
  PROTOBUF_FIELD_OFFSET(::moniter::DiskMoniterRequest, _impl_.avail_disk_volume_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moniter::DiskMoniterReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::moniter::DiskMoniterReply, _impl_.disk_info_reply_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moniter::ProcessMoniterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::moniter::ProcessMoniterRequest, _impl_.process_info_request_),
  PROTOBUF_FIELD_OFFSET(::moniter::ProcessMoniterRequest, _impl_.parent_process_info_request_),
  PROTOBUF_FIELD_OFFSET(::moniter::ProcessMoniterRequest, _impl_.all_process_info_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moniter::ProcessMoniterReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::moniter::ProcessMoniterReply, _impl_.process_info_reply_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moniter::SelectedProcessMoniterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::moniter::SelectedProcessMoniterRequest, _impl_.pid_process_info_request_),
  PROTOBUF_FIELD_OFFSET(::moniter::SelectedProcessMoniterRequest, _impl_.selected_process_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::moniter::SelectedProcessMoniterReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::moniter::SelectedProcessMoniterReply, _impl_.selected_process_info_reply_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::moniter::MemoryRequest)},
  { 10, -1, -1, sizeof(::moniter::MemoryReply)},
  { 17, -1, -1, sizeof(::moniter::CpuMoniterRequest)},
  { 24, -1, -1, sizeof(::moniter::CpuMoniterReply)},
  { 31, -1, -1, sizeof(::moniter::DiskMoniterRequest)},
  { 40, -1, -1, sizeof(::moniter::DiskMoniterReply)},
  { 47, -1, -1, sizeof(::moniter::ProcessMoniterRequest)},
  { 56, -1, -1, sizeof(::moniter::ProcessMoniterReply)},
  { 63, -1, -1, sizeof(::moniter::SelectedProcessMoniterRequest)},
  { 71, -1, -1, sizeof(::moniter::SelectedProcessMoniterReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::moniter::_MemoryRequest_default_instance_._instance,
  &::moniter::_MemoryReply_default_instance_._instance,
  &::moniter::_CpuMoniterRequest_default_instance_._instance,
  &::moniter::_CpuMoniterReply_default_instance_._instance,
  &::moniter::_DiskMoniterRequest_default_instance_._instance,
  &::moniter::_DiskMoniterReply_default_instance_._instance,
  &::moniter::_ProcessMoniterRequest_default_instance_._instance,
  &::moniter::_ProcessMoniterReply_default_instance_._instance,
  &::moniter::_SelectedProcessMoniterRequest_default_instance_._instance,
  &::moniter::_SelectedProcessMoniterReply_default_instance_._instance,
};

const char descriptor_table_protodef_moniter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmoniter.proto\022\007moniter\"\235\001\n\rMemoryReque"
  "st\022\036\n\026virtual_memory_request\030\001 \001(\t\022\037\n\027ph"
  "ysical_memory_request\030\002 \001(\t\022$\n\034avail_vir"
  "tual_memory_request\030\003 \001(\t\022%\n\035avail_physi"
  "cal_memory_request\030\004 \001(\t\"(\n\013MemoryReply\022"
  "\031\n\021memory_info_reply\030\001 \001(\t\"(\n\021CpuMoniter"
  "Request\022\023\n\013cpu_request\030\001 \001(\t\"$\n\017CpuMonit"
  "erReply\022\021\n\tcpu_reply\030\001 \001(\t\"v\n\022DiskMonite"
  "rRequest\022!\n\031total_disk_volume_request\030\001 "
  "\001(\t\022\032\n\022disk_usage_request\030\002 \001(\t\022!\n\031avail"
  "_disk_volume_request\030\003 \001(\t\"+\n\020DiskMonite"
  "rReply\022\027\n\017disk_info_reply\030\001 \001(\t\"|\n\025Proce"
  "ssMoniterRequest\022\034\n\024process_info_request"
  "\030\001 \001(\t\022#\n\033parent_process_info_request\030\002 "
  "\001(\t\022 \n\030all_process_info_request\030\003 \001(\t\"1\n"
  "\023ProcessMoniterReply\022\032\n\022process_info_rep"
  "ly\030\001 \001(\t\"`\n\035SelectedProcessMoniterReques"
  "t\022 \n\030pid_process_info_request\030\001 \001(\t\022\035\n\025s"
  "elected_process_name\030\002 \001(\t\"B\n\033SelectedPr"
  "ocessMoniterReply\022#\n\033selected_process_in"
  "fo_reply\030\001 \001(\t2\361\003\n\016MoniterService\022O\n\035cur"
  "rent_memory_moniter_method\022\026.moniter.Mem"
  "oryRequest\032\024.moniter.MemoryReply\"\000\022Z\n cu"
  "rrent_cpu_usage_moniter_method\022\032.moniter"
  ".CpuMoniterRequest\032\030.moniter.CpuMoniterR"
  "eply\"\000\022]\n!current_disk_usage_moniter_met"
  "hod\022\033.moniter.DiskMoniterRequest\032\031.monit"
  "er.DiskMoniterReply\"\000\022`\n\036current_process"
  "_moniter_method\022\036.moniter.ProcessMoniter"
  "Request\032\034.moniter.ProcessMoniterReply\"\000\022"
  "q\n\037selected_process_moniter_method\022&.mon"
  "iter.SelectedProcessMoniterRequest\032$.mon"
  "iter.SelectedProcessMoniterReply\"\000B\016\n\014mo"
  "niter.grpcb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_moniter_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_moniter_2eproto = {
    false, false, 1338, descriptor_table_protodef_moniter_2eproto,
    "moniter.proto",
    &descriptor_table_moniter_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_moniter_2eproto::offsets,
    file_level_metadata_moniter_2eproto, file_level_enum_descriptors_moniter_2eproto,
    file_level_service_descriptors_moniter_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_moniter_2eproto_getter() {
  return &descriptor_table_moniter_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_moniter_2eproto(&descriptor_table_moniter_2eproto);
namespace moniter {

// ===================================================================

class MemoryRequest::_Internal {
 public:
};

MemoryRequest::MemoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:moniter.MemoryRequest)
}
MemoryRequest::MemoryRequest(const MemoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MemoryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.virtual_memory_request_){}
    , decltype(_impl_.physical_memory_request_){}
    , decltype(_impl_.avail_virtual_memory_request_){}
    , decltype(_impl_.avail_physical_memory_request_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.virtual_memory_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.virtual_memory_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_virtual_memory_request().empty()) {
    _this->_impl_.virtual_memory_request_.Set(from._internal_virtual_memory_request(), 
      _this->GetArenaForAllocation());
  }
  _impl_.physical_memory_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.physical_memory_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_physical_memory_request().empty()) {
    _this->_impl_.physical_memory_request_.Set(from._internal_physical_memory_request(), 
      _this->GetArenaForAllocation());
  }
  _impl_.avail_virtual_memory_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avail_virtual_memory_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_avail_virtual_memory_request().empty()) {
    _this->_impl_.avail_virtual_memory_request_.Set(from._internal_avail_virtual_memory_request(), 
      _this->GetArenaForAllocation());
  }
  _impl_.avail_physical_memory_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avail_physical_memory_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_avail_physical_memory_request().empty()) {
    _this->_impl_.avail_physical_memory_request_.Set(from._internal_avail_physical_memory_request(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:moniter.MemoryRequest)
}

inline void MemoryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.virtual_memory_request_){}
    , decltype(_impl_.physical_memory_request_){}
    , decltype(_impl_.avail_virtual_memory_request_){}
    , decltype(_impl_.avail_physical_memory_request_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.virtual_memory_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.virtual_memory_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.physical_memory_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.physical_memory_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avail_virtual_memory_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avail_virtual_memory_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avail_physical_memory_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avail_physical_memory_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MemoryRequest::~MemoryRequest() {
  // @@protoc_insertion_point(destructor:moniter.MemoryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemoryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.virtual_memory_request_.Destroy();
  _impl_.physical_memory_request_.Destroy();
  _impl_.avail_virtual_memory_request_.Destroy();
  _impl_.avail_physical_memory_request_.Destroy();
}

void MemoryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:moniter.MemoryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.virtual_memory_request_.ClearToEmpty();
  _impl_.physical_memory_request_.ClearToEmpty();
  _impl_.avail_virtual_memory_request_.ClearToEmpty();
  _impl_.avail_physical_memory_request_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string virtual_memory_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_virtual_memory_request();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "moniter.MemoryRequest.virtual_memory_request"));
        } else
          goto handle_unusual;
        continue;
      // string physical_memory_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_physical_memory_request();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "moniter.MemoryRequest.physical_memory_request"));
        } else
          goto handle_unusual;
        continue;
      // string avail_virtual_memory_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_avail_virtual_memory_request();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "moniter.MemoryRequest.avail_virtual_memory_request"));
        } else
          goto handle_unusual;
        continue;
      // string avail_physical_memory_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_avail_physical_memory_request();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "moniter.MemoryRequest.avail_physical_memory_request"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moniter.MemoryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string virtual_memory_request = 1;
  if (!this->_internal_virtual_memory_request().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_virtual_memory_request().data(), static_cast<int>(this->_internal_virtual_memory_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moniter.MemoryRequest.virtual_memory_request");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_virtual_memory_request(), target);
  }

  // string physical_memory_request = 2;
  if (!this->_internal_physical_memory_request().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_physical_memory_request().data(), static_cast<int>(this->_internal_physical_memory_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moniter.MemoryRequest.physical_memory_request");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_physical_memory_request(), target);
  }

  // string avail_virtual_memory_request = 3;
  if (!this->_internal_avail_virtual_memory_request().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avail_virtual_memory_request().data(), static_cast<int>(this->_internal_avail_virtual_memory_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moniter.MemoryRequest.avail_virtual_memory_request");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_avail_virtual_memory_request(), target);
  }

  // string avail_physical_memory_request = 4;
  if (!this->_internal_avail_physical_memory_request().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avail_physical_memory_request().data(), static_cast<int>(this->_internal_avail_physical_memory_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moniter.MemoryRequest.avail_physical_memory_request");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_avail_physical_memory_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moniter.MemoryRequest)
  return target;
}

size_t MemoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moniter.MemoryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string virtual_memory_request = 1;
  if (!this->_internal_virtual_memory_request().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_virtual_memory_request());
  }

  // string physical_memory_request = 2;
  if (!this->_internal_physical_memory_request().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_physical_memory_request());
  }

  // string avail_virtual_memory_request = 3;
  if (!this->_internal_avail_virtual_memory_request().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avail_virtual_memory_request());
  }

  // string avail_physical_memory_request = 4;
  if (!this->_internal_avail_physical_memory_request().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avail_physical_memory_request());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemoryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MemoryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemoryRequest::GetClassData() const { return &_class_data_; }


void MemoryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MemoryRequest*>(&to_msg);
  auto& from = static_cast<const MemoryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:moniter.MemoryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_virtual_memory_request().empty()) {
    _this->_internal_set_virtual_memory_request(from._internal_virtual_memory_request());
  }
  if (!from._internal_physical_memory_request().empty()) {
    _this->_internal_set_physical_memory_request(from._internal_physical_memory_request());
  }
  if (!from._internal_avail_virtual_memory_request().empty()) {
    _this->_internal_set_avail_virtual_memory_request(from._internal_avail_virtual_memory_request());
  }
  if (!from._internal_avail_physical_memory_request().empty()) {
    _this->_internal_set_avail_physical_memory_request(from._internal_avail_physical_memory_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemoryRequest::CopyFrom(const MemoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moniter.MemoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryRequest::IsInitialized() const {
  return true;
}

void MemoryRequest::InternalSwap(MemoryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.virtual_memory_request_, lhs_arena,
      &other->_impl_.virtual_memory_request_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.physical_memory_request_, lhs_arena,
      &other->_impl_.physical_memory_request_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avail_virtual_memory_request_, lhs_arena,
      &other->_impl_.avail_virtual_memory_request_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avail_physical_memory_request_, lhs_arena,
      &other->_impl_.avail_physical_memory_request_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_moniter_2eproto_getter, &descriptor_table_moniter_2eproto_once,
      file_level_metadata_moniter_2eproto[0]);
}

// ===================================================================

class MemoryReply::_Internal {
 public:
};

MemoryReply::MemoryReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:moniter.MemoryReply)
}
MemoryReply::MemoryReply(const MemoryReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MemoryReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.memory_info_reply_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.memory_info_reply_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memory_info_reply_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memory_info_reply().empty()) {
    _this->_impl_.memory_info_reply_.Set(from._internal_memory_info_reply(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:moniter.MemoryReply)
}

inline void MemoryReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.memory_info_reply_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.memory_info_reply_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memory_info_reply_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MemoryReply::~MemoryReply() {
  // @@protoc_insertion_point(destructor:moniter.MemoryReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemoryReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.memory_info_reply_.Destroy();
}

void MemoryReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemoryReply::Clear() {
// @@protoc_insertion_point(message_clear_start:moniter.MemoryReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.memory_info_reply_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoryReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string memory_info_reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_memory_info_reply();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "moniter.MemoryReply.memory_info_reply"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoryReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moniter.MemoryReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string memory_info_reply = 1;
  if (!this->_internal_memory_info_reply().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memory_info_reply().data(), static_cast<int>(this->_internal_memory_info_reply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moniter.MemoryReply.memory_info_reply");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_memory_info_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moniter.MemoryReply)
  return target;
}

size_t MemoryReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moniter.MemoryReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string memory_info_reply = 1;
  if (!this->_internal_memory_info_reply().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memory_info_reply());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemoryReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MemoryReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemoryReply::GetClassData() const { return &_class_data_; }


void MemoryReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MemoryReply*>(&to_msg);
  auto& from = static_cast<const MemoryReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:moniter.MemoryReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_memory_info_reply().empty()) {
    _this->_internal_set_memory_info_reply(from._internal_memory_info_reply());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemoryReply::CopyFrom(const MemoryReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moniter.MemoryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryReply::IsInitialized() const {
  return true;
}

void MemoryReply::InternalSwap(MemoryReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.memory_info_reply_, lhs_arena,
      &other->_impl_.memory_info_reply_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_moniter_2eproto_getter, &descriptor_table_moniter_2eproto_once,
      file_level_metadata_moniter_2eproto[1]);
}

// ===================================================================

class CpuMoniterRequest::_Internal {
 public:
};

CpuMoniterRequest::CpuMoniterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:moniter.CpuMoniterRequest)
}
CpuMoniterRequest::CpuMoniterRequest(const CpuMoniterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CpuMoniterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cpu_request_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cpu_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpu_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cpu_request().empty()) {
    _this->_impl_.cpu_request_.Set(from._internal_cpu_request(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:moniter.CpuMoniterRequest)
}

inline void CpuMoniterRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cpu_request_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cpu_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpu_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CpuMoniterRequest::~CpuMoniterRequest() {
  // @@protoc_insertion_point(destructor:moniter.CpuMoniterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CpuMoniterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cpu_request_.Destroy();
}

void CpuMoniterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CpuMoniterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:moniter.CpuMoniterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cpu_request_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpuMoniterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cpu_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cpu_request();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "moniter.CpuMoniterRequest.cpu_request"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CpuMoniterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moniter.CpuMoniterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cpu_request = 1;
  if (!this->_internal_cpu_request().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpu_request().data(), static_cast<int>(this->_internal_cpu_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moniter.CpuMoniterRequest.cpu_request");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cpu_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moniter.CpuMoniterRequest)
  return target;
}

size_t CpuMoniterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moniter.CpuMoniterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cpu_request = 1;
  if (!this->_internal_cpu_request().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpu_request());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CpuMoniterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CpuMoniterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CpuMoniterRequest::GetClassData() const { return &_class_data_; }


void CpuMoniterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CpuMoniterRequest*>(&to_msg);
  auto& from = static_cast<const CpuMoniterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:moniter.CpuMoniterRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cpu_request().empty()) {
    _this->_internal_set_cpu_request(from._internal_cpu_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CpuMoniterRequest::CopyFrom(const CpuMoniterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moniter.CpuMoniterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuMoniterRequest::IsInitialized() const {
  return true;
}

void CpuMoniterRequest::InternalSwap(CpuMoniterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cpu_request_, lhs_arena,
      &other->_impl_.cpu_request_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuMoniterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_moniter_2eproto_getter, &descriptor_table_moniter_2eproto_once,
      file_level_metadata_moniter_2eproto[2]);
}

// ===================================================================

class CpuMoniterReply::_Internal {
 public:
};

CpuMoniterReply::CpuMoniterReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:moniter.CpuMoniterReply)
}
CpuMoniterReply::CpuMoniterReply(const CpuMoniterReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CpuMoniterReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cpu_reply_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cpu_reply_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpu_reply_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cpu_reply().empty()) {
    _this->_impl_.cpu_reply_.Set(from._internal_cpu_reply(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:moniter.CpuMoniterReply)
}

inline void CpuMoniterReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cpu_reply_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cpu_reply_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpu_reply_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CpuMoniterReply::~CpuMoniterReply() {
  // @@protoc_insertion_point(destructor:moniter.CpuMoniterReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CpuMoniterReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cpu_reply_.Destroy();
}

void CpuMoniterReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CpuMoniterReply::Clear() {
// @@protoc_insertion_point(message_clear_start:moniter.CpuMoniterReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cpu_reply_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpuMoniterReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cpu_reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cpu_reply();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "moniter.CpuMoniterReply.cpu_reply"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CpuMoniterReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moniter.CpuMoniterReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cpu_reply = 1;
  if (!this->_internal_cpu_reply().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpu_reply().data(), static_cast<int>(this->_internal_cpu_reply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moniter.CpuMoniterReply.cpu_reply");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cpu_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moniter.CpuMoniterReply)
  return target;
}

size_t CpuMoniterReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moniter.CpuMoniterReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cpu_reply = 1;
  if (!this->_internal_cpu_reply().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpu_reply());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CpuMoniterReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CpuMoniterReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CpuMoniterReply::GetClassData() const { return &_class_data_; }


void CpuMoniterReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CpuMoniterReply*>(&to_msg);
  auto& from = static_cast<const CpuMoniterReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:moniter.CpuMoniterReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cpu_reply().empty()) {
    _this->_internal_set_cpu_reply(from._internal_cpu_reply());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CpuMoniterReply::CopyFrom(const CpuMoniterReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moniter.CpuMoniterReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuMoniterReply::IsInitialized() const {
  return true;
}

void CpuMoniterReply::InternalSwap(CpuMoniterReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cpu_reply_, lhs_arena,
      &other->_impl_.cpu_reply_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuMoniterReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_moniter_2eproto_getter, &descriptor_table_moniter_2eproto_once,
      file_level_metadata_moniter_2eproto[3]);
}

// ===================================================================

class DiskMoniterRequest::_Internal {
 public:
};

DiskMoniterRequest::DiskMoniterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:moniter.DiskMoniterRequest)
}
DiskMoniterRequest::DiskMoniterRequest(const DiskMoniterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DiskMoniterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.total_disk_volume_request_){}
    , decltype(_impl_.disk_usage_request_){}
    , decltype(_impl_.avail_disk_volume_request_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.total_disk_volume_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.total_disk_volume_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_total_disk_volume_request().empty()) {
    _this->_impl_.total_disk_volume_request_.Set(from._internal_total_disk_volume_request(), 
      _this->GetArenaForAllocation());
  }
  _impl_.disk_usage_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.disk_usage_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_disk_usage_request().empty()) {
    _this->_impl_.disk_usage_request_.Set(from._internal_disk_usage_request(), 
      _this->GetArenaForAllocation());
  }
  _impl_.avail_disk_volume_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avail_disk_volume_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_avail_disk_volume_request().empty()) {
    _this->_impl_.avail_disk_volume_request_.Set(from._internal_avail_disk_volume_request(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:moniter.DiskMoniterRequest)
}

inline void DiskMoniterRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.total_disk_volume_request_){}
    , decltype(_impl_.disk_usage_request_){}
    , decltype(_impl_.avail_disk_volume_request_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.total_disk_volume_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.total_disk_volume_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.disk_usage_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.disk_usage_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avail_disk_volume_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avail_disk_volume_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DiskMoniterRequest::~DiskMoniterRequest() {
  // @@protoc_insertion_point(destructor:moniter.DiskMoniterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DiskMoniterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.total_disk_volume_request_.Destroy();
  _impl_.disk_usage_request_.Destroy();
  _impl_.avail_disk_volume_request_.Destroy();
}

void DiskMoniterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DiskMoniterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:moniter.DiskMoniterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.total_disk_volume_request_.ClearToEmpty();
  _impl_.disk_usage_request_.ClearToEmpty();
  _impl_.avail_disk_volume_request_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiskMoniterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string total_disk_volume_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_total_disk_volume_request();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "moniter.DiskMoniterRequest.total_disk_volume_request"));
        } else
          goto handle_unusual;
        continue;
      // string disk_usage_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_disk_usage_request();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "moniter.DiskMoniterRequest.disk_usage_request"));
        } else
          goto handle_unusual;
        continue;
      // string avail_disk_volume_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_avail_disk_volume_request();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "moniter.DiskMoniterRequest.avail_disk_volume_request"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiskMoniterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moniter.DiskMoniterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string total_disk_volume_request = 1;
  if (!this->_internal_total_disk_volume_request().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_total_disk_volume_request().data(), static_cast<int>(this->_internal_total_disk_volume_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moniter.DiskMoniterRequest.total_disk_volume_request");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_total_disk_volume_request(), target);
  }

  // string disk_usage_request = 2;
  if (!this->_internal_disk_usage_request().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_disk_usage_request().data(), static_cast<int>(this->_internal_disk_usage_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moniter.DiskMoniterRequest.disk_usage_request");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_disk_usage_request(), target);
  }

  // string avail_disk_volume_request = 3;
  if (!this->_internal_avail_disk_volume_request().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avail_disk_volume_request().data(), static_cast<int>(this->_internal_avail_disk_volume_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moniter.DiskMoniterRequest.avail_disk_volume_request");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_avail_disk_volume_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moniter.DiskMoniterRequest)
  return target;
}

size_t DiskMoniterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moniter.DiskMoniterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string total_disk_volume_request = 1;
  if (!this->_internal_total_disk_volume_request().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_total_disk_volume_request());
  }

  // string disk_usage_request = 2;
  if (!this->_internal_disk_usage_request().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_disk_usage_request());
  }

  // string avail_disk_volume_request = 3;
  if (!this->_internal_avail_disk_volume_request().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avail_disk_volume_request());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiskMoniterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DiskMoniterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiskMoniterRequest::GetClassData() const { return &_class_data_; }


void DiskMoniterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DiskMoniterRequest*>(&to_msg);
  auto& from = static_cast<const DiskMoniterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:moniter.DiskMoniterRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_total_disk_volume_request().empty()) {
    _this->_internal_set_total_disk_volume_request(from._internal_total_disk_volume_request());
  }
  if (!from._internal_disk_usage_request().empty()) {
    _this->_internal_set_disk_usage_request(from._internal_disk_usage_request());
  }
  if (!from._internal_avail_disk_volume_request().empty()) {
    _this->_internal_set_avail_disk_volume_request(from._internal_avail_disk_volume_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiskMoniterRequest::CopyFrom(const DiskMoniterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moniter.DiskMoniterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskMoniterRequest::IsInitialized() const {
  return true;
}

void DiskMoniterRequest::InternalSwap(DiskMoniterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.total_disk_volume_request_, lhs_arena,
      &other->_impl_.total_disk_volume_request_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.disk_usage_request_, lhs_arena,
      &other->_impl_.disk_usage_request_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avail_disk_volume_request_, lhs_arena,
      &other->_impl_.avail_disk_volume_request_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DiskMoniterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_moniter_2eproto_getter, &descriptor_table_moniter_2eproto_once,
      file_level_metadata_moniter_2eproto[4]);
}

// ===================================================================

class DiskMoniterReply::_Internal {
 public:
};

DiskMoniterReply::DiskMoniterReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:moniter.DiskMoniterReply)
}
DiskMoniterReply::DiskMoniterReply(const DiskMoniterReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DiskMoniterReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.disk_info_reply_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.disk_info_reply_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.disk_info_reply_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_disk_info_reply().empty()) {
    _this->_impl_.disk_info_reply_.Set(from._internal_disk_info_reply(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:moniter.DiskMoniterReply)
}

inline void DiskMoniterReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.disk_info_reply_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.disk_info_reply_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.disk_info_reply_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DiskMoniterReply::~DiskMoniterReply() {
  // @@protoc_insertion_point(destructor:moniter.DiskMoniterReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DiskMoniterReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.disk_info_reply_.Destroy();
}

void DiskMoniterReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DiskMoniterReply::Clear() {
// @@protoc_insertion_point(message_clear_start:moniter.DiskMoniterReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.disk_info_reply_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiskMoniterReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string disk_info_reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_disk_info_reply();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "moniter.DiskMoniterReply.disk_info_reply"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiskMoniterReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moniter.DiskMoniterReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string disk_info_reply = 1;
  if (!this->_internal_disk_info_reply().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_disk_info_reply().data(), static_cast<int>(this->_internal_disk_info_reply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moniter.DiskMoniterReply.disk_info_reply");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_disk_info_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moniter.DiskMoniterReply)
  return target;
}

size_t DiskMoniterReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moniter.DiskMoniterReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string disk_info_reply = 1;
  if (!this->_internal_disk_info_reply().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_disk_info_reply());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiskMoniterReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DiskMoniterReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiskMoniterReply::GetClassData() const { return &_class_data_; }


void DiskMoniterReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DiskMoniterReply*>(&to_msg);
  auto& from = static_cast<const DiskMoniterReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:moniter.DiskMoniterReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_disk_info_reply().empty()) {
    _this->_internal_set_disk_info_reply(from._internal_disk_info_reply());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiskMoniterReply::CopyFrom(const DiskMoniterReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moniter.DiskMoniterReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskMoniterReply::IsInitialized() const {
  return true;
}

void DiskMoniterReply::InternalSwap(DiskMoniterReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.disk_info_reply_, lhs_arena,
      &other->_impl_.disk_info_reply_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DiskMoniterReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_moniter_2eproto_getter, &descriptor_table_moniter_2eproto_once,
      file_level_metadata_moniter_2eproto[5]);
}

// ===================================================================

class ProcessMoniterRequest::_Internal {
 public:
};

ProcessMoniterRequest::ProcessMoniterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:moniter.ProcessMoniterRequest)
}
ProcessMoniterRequest::ProcessMoniterRequest(const ProcessMoniterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessMoniterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.process_info_request_){}
    , decltype(_impl_.parent_process_info_request_){}
    , decltype(_impl_.all_process_info_request_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.process_info_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.process_info_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_process_info_request().empty()) {
    _this->_impl_.process_info_request_.Set(from._internal_process_info_request(), 
      _this->GetArenaForAllocation());
  }
  _impl_.parent_process_info_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_process_info_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent_process_info_request().empty()) {
    _this->_impl_.parent_process_info_request_.Set(from._internal_parent_process_info_request(), 
      _this->GetArenaForAllocation());
  }
  _impl_.all_process_info_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.all_process_info_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_all_process_info_request().empty()) {
    _this->_impl_.all_process_info_request_.Set(from._internal_all_process_info_request(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:moniter.ProcessMoniterRequest)
}

inline void ProcessMoniterRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.process_info_request_){}
    , decltype(_impl_.parent_process_info_request_){}
    , decltype(_impl_.all_process_info_request_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.process_info_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.process_info_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parent_process_info_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_process_info_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.all_process_info_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.all_process_info_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcessMoniterRequest::~ProcessMoniterRequest() {
  // @@protoc_insertion_point(destructor:moniter.ProcessMoniterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessMoniterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.process_info_request_.Destroy();
  _impl_.parent_process_info_request_.Destroy();
  _impl_.all_process_info_request_.Destroy();
}

void ProcessMoniterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessMoniterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:moniter.ProcessMoniterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.process_info_request_.ClearToEmpty();
  _impl_.parent_process_info_request_.ClearToEmpty();
  _impl_.all_process_info_request_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessMoniterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string process_info_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_process_info_request();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "moniter.ProcessMoniterRequest.process_info_request"));
        } else
          goto handle_unusual;
        continue;
      // string parent_process_info_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_parent_process_info_request();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "moniter.ProcessMoniterRequest.parent_process_info_request"));
        } else
          goto handle_unusual;
        continue;
      // string all_process_info_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_all_process_info_request();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "moniter.ProcessMoniterRequest.all_process_info_request"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessMoniterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moniter.ProcessMoniterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string process_info_request = 1;
  if (!this->_internal_process_info_request().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_process_info_request().data(), static_cast<int>(this->_internal_process_info_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moniter.ProcessMoniterRequest.process_info_request");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_process_info_request(), target);
  }

  // string parent_process_info_request = 2;
  if (!this->_internal_parent_process_info_request().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent_process_info_request().data(), static_cast<int>(this->_internal_parent_process_info_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moniter.ProcessMoniterRequest.parent_process_info_request");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_parent_process_info_request(), target);
  }

  // string all_process_info_request = 3;
  if (!this->_internal_all_process_info_request().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_all_process_info_request().data(), static_cast<int>(this->_internal_all_process_info_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moniter.ProcessMoniterRequest.all_process_info_request");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_all_process_info_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moniter.ProcessMoniterRequest)
  return target;
}

size_t ProcessMoniterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moniter.ProcessMoniterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string process_info_request = 1;
  if (!this->_internal_process_info_request().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_process_info_request());
  }

  // string parent_process_info_request = 2;
  if (!this->_internal_parent_process_info_request().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_process_info_request());
  }

  // string all_process_info_request = 3;
  if (!this->_internal_all_process_info_request().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_all_process_info_request());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessMoniterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessMoniterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessMoniterRequest::GetClassData() const { return &_class_data_; }


void ProcessMoniterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessMoniterRequest*>(&to_msg);
  auto& from = static_cast<const ProcessMoniterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:moniter.ProcessMoniterRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_process_info_request().empty()) {
    _this->_internal_set_process_info_request(from._internal_process_info_request());
  }
  if (!from._internal_parent_process_info_request().empty()) {
    _this->_internal_set_parent_process_info_request(from._internal_parent_process_info_request());
  }
  if (!from._internal_all_process_info_request().empty()) {
    _this->_internal_set_all_process_info_request(from._internal_all_process_info_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessMoniterRequest::CopyFrom(const ProcessMoniterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moniter.ProcessMoniterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessMoniterRequest::IsInitialized() const {
  return true;
}

void ProcessMoniterRequest::InternalSwap(ProcessMoniterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.process_info_request_, lhs_arena,
      &other->_impl_.process_info_request_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parent_process_info_request_, lhs_arena,
      &other->_impl_.parent_process_info_request_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.all_process_info_request_, lhs_arena,
      &other->_impl_.all_process_info_request_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessMoniterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_moniter_2eproto_getter, &descriptor_table_moniter_2eproto_once,
      file_level_metadata_moniter_2eproto[6]);
}

// ===================================================================

class ProcessMoniterReply::_Internal {
 public:
};

ProcessMoniterReply::ProcessMoniterReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:moniter.ProcessMoniterReply)
}
ProcessMoniterReply::ProcessMoniterReply(const ProcessMoniterReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessMoniterReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.process_info_reply_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.process_info_reply_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.process_info_reply_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_process_info_reply().empty()) {
    _this->_impl_.process_info_reply_.Set(from._internal_process_info_reply(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:moniter.ProcessMoniterReply)
}

inline void ProcessMoniterReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.process_info_reply_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.process_info_reply_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.process_info_reply_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcessMoniterReply::~ProcessMoniterReply() {
  // @@protoc_insertion_point(destructor:moniter.ProcessMoniterReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessMoniterReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.process_info_reply_.Destroy();
}

void ProcessMoniterReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessMoniterReply::Clear() {
// @@protoc_insertion_point(message_clear_start:moniter.ProcessMoniterReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.process_info_reply_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessMoniterReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string process_info_reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_process_info_reply();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "moniter.ProcessMoniterReply.process_info_reply"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessMoniterReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moniter.ProcessMoniterReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string process_info_reply = 1;
  if (!this->_internal_process_info_reply().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_process_info_reply().data(), static_cast<int>(this->_internal_process_info_reply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moniter.ProcessMoniterReply.process_info_reply");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_process_info_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moniter.ProcessMoniterReply)
  return target;
}

size_t ProcessMoniterReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moniter.ProcessMoniterReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string process_info_reply = 1;
  if (!this->_internal_process_info_reply().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_process_info_reply());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessMoniterReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessMoniterReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessMoniterReply::GetClassData() const { return &_class_data_; }


void ProcessMoniterReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessMoniterReply*>(&to_msg);
  auto& from = static_cast<const ProcessMoniterReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:moniter.ProcessMoniterReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_process_info_reply().empty()) {
    _this->_internal_set_process_info_reply(from._internal_process_info_reply());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessMoniterReply::CopyFrom(const ProcessMoniterReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moniter.ProcessMoniterReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessMoniterReply::IsInitialized() const {
  return true;
}

void ProcessMoniterReply::InternalSwap(ProcessMoniterReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.process_info_reply_, lhs_arena,
      &other->_impl_.process_info_reply_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessMoniterReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_moniter_2eproto_getter, &descriptor_table_moniter_2eproto_once,
      file_level_metadata_moniter_2eproto[7]);
}

// ===================================================================

class SelectedProcessMoniterRequest::_Internal {
 public:
};

SelectedProcessMoniterRequest::SelectedProcessMoniterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:moniter.SelectedProcessMoniterRequest)
}
SelectedProcessMoniterRequest::SelectedProcessMoniterRequest(const SelectedProcessMoniterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelectedProcessMoniterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_process_info_request_){}
    , decltype(_impl_.selected_process_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pid_process_info_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pid_process_info_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pid_process_info_request().empty()) {
    _this->_impl_.pid_process_info_request_.Set(from._internal_pid_process_info_request(), 
      _this->GetArenaForAllocation());
  }
  _impl_.selected_process_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selected_process_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_selected_process_name().empty()) {
    _this->_impl_.selected_process_name_.Set(from._internal_selected_process_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:moniter.SelectedProcessMoniterRequest)
}

inline void SelectedProcessMoniterRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_process_info_request_){}
    , decltype(_impl_.selected_process_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pid_process_info_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pid_process_info_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.selected_process_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selected_process_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SelectedProcessMoniterRequest::~SelectedProcessMoniterRequest() {
  // @@protoc_insertion_point(destructor:moniter.SelectedProcessMoniterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectedProcessMoniterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pid_process_info_request_.Destroy();
  _impl_.selected_process_name_.Destroy();
}

void SelectedProcessMoniterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectedProcessMoniterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:moniter.SelectedProcessMoniterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_process_info_request_.ClearToEmpty();
  _impl_.selected_process_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectedProcessMoniterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pid_process_info_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pid_process_info_request();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "moniter.SelectedProcessMoniterRequest.pid_process_info_request"));
        } else
          goto handle_unusual;
        continue;
      // string selected_process_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_selected_process_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "moniter.SelectedProcessMoniterRequest.selected_process_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectedProcessMoniterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moniter.SelectedProcessMoniterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pid_process_info_request = 1;
  if (!this->_internal_pid_process_info_request().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pid_process_info_request().data(), static_cast<int>(this->_internal_pid_process_info_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moniter.SelectedProcessMoniterRequest.pid_process_info_request");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pid_process_info_request(), target);
  }

  // string selected_process_name = 2;
  if (!this->_internal_selected_process_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_selected_process_name().data(), static_cast<int>(this->_internal_selected_process_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moniter.SelectedProcessMoniterRequest.selected_process_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_selected_process_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moniter.SelectedProcessMoniterRequest)
  return target;
}

size_t SelectedProcessMoniterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moniter.SelectedProcessMoniterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pid_process_info_request = 1;
  if (!this->_internal_pid_process_info_request().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pid_process_info_request());
  }

  // string selected_process_name = 2;
  if (!this->_internal_selected_process_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_selected_process_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectedProcessMoniterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelectedProcessMoniterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectedProcessMoniterRequest::GetClassData() const { return &_class_data_; }


void SelectedProcessMoniterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelectedProcessMoniterRequest*>(&to_msg);
  auto& from = static_cast<const SelectedProcessMoniterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:moniter.SelectedProcessMoniterRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pid_process_info_request().empty()) {
    _this->_internal_set_pid_process_info_request(from._internal_pid_process_info_request());
  }
  if (!from._internal_selected_process_name().empty()) {
    _this->_internal_set_selected_process_name(from._internal_selected_process_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectedProcessMoniterRequest::CopyFrom(const SelectedProcessMoniterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moniter.SelectedProcessMoniterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectedProcessMoniterRequest::IsInitialized() const {
  return true;
}

void SelectedProcessMoniterRequest::InternalSwap(SelectedProcessMoniterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pid_process_info_request_, lhs_arena,
      &other->_impl_.pid_process_info_request_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selected_process_name_, lhs_arena,
      &other->_impl_.selected_process_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectedProcessMoniterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_moniter_2eproto_getter, &descriptor_table_moniter_2eproto_once,
      file_level_metadata_moniter_2eproto[8]);
}

// ===================================================================

class SelectedProcessMoniterReply::_Internal {
 public:
};

SelectedProcessMoniterReply::SelectedProcessMoniterReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:moniter.SelectedProcessMoniterReply)
}
SelectedProcessMoniterReply::SelectedProcessMoniterReply(const SelectedProcessMoniterReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelectedProcessMoniterReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.selected_process_info_reply_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.selected_process_info_reply_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selected_process_info_reply_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_selected_process_info_reply().empty()) {
    _this->_impl_.selected_process_info_reply_.Set(from._internal_selected_process_info_reply(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:moniter.SelectedProcessMoniterReply)
}

inline void SelectedProcessMoniterReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.selected_process_info_reply_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.selected_process_info_reply_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selected_process_info_reply_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SelectedProcessMoniterReply::~SelectedProcessMoniterReply() {
  // @@protoc_insertion_point(destructor:moniter.SelectedProcessMoniterReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectedProcessMoniterReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.selected_process_info_reply_.Destroy();
}

void SelectedProcessMoniterReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectedProcessMoniterReply::Clear() {
// @@protoc_insertion_point(message_clear_start:moniter.SelectedProcessMoniterReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.selected_process_info_reply_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectedProcessMoniterReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string selected_process_info_reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_selected_process_info_reply();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "moniter.SelectedProcessMoniterReply.selected_process_info_reply"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectedProcessMoniterReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moniter.SelectedProcessMoniterReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string selected_process_info_reply = 1;
  if (!this->_internal_selected_process_info_reply().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_selected_process_info_reply().data(), static_cast<int>(this->_internal_selected_process_info_reply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "moniter.SelectedProcessMoniterReply.selected_process_info_reply");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_selected_process_info_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moniter.SelectedProcessMoniterReply)
  return target;
}

size_t SelectedProcessMoniterReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moniter.SelectedProcessMoniterReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string selected_process_info_reply = 1;
  if (!this->_internal_selected_process_info_reply().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_selected_process_info_reply());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectedProcessMoniterReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelectedProcessMoniterReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectedProcessMoniterReply::GetClassData() const { return &_class_data_; }


void SelectedProcessMoniterReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelectedProcessMoniterReply*>(&to_msg);
  auto& from = static_cast<const SelectedProcessMoniterReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:moniter.SelectedProcessMoniterReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_selected_process_info_reply().empty()) {
    _this->_internal_set_selected_process_info_reply(from._internal_selected_process_info_reply());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectedProcessMoniterReply::CopyFrom(const SelectedProcessMoniterReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moniter.SelectedProcessMoniterReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectedProcessMoniterReply::IsInitialized() const {
  return true;
}

void SelectedProcessMoniterReply::InternalSwap(SelectedProcessMoniterReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selected_process_info_reply_, lhs_arena,
      &other->_impl_.selected_process_info_reply_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectedProcessMoniterReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_moniter_2eproto_getter, &descriptor_table_moniter_2eproto_once,
      file_level_metadata_moniter_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace moniter
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::moniter::MemoryRequest*
Arena::CreateMaybeMessage< ::moniter::MemoryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::moniter::MemoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::moniter::MemoryReply*
Arena::CreateMaybeMessage< ::moniter::MemoryReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::moniter::MemoryReply >(arena);
}
template<> PROTOBUF_NOINLINE ::moniter::CpuMoniterRequest*
Arena::CreateMaybeMessage< ::moniter::CpuMoniterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::moniter::CpuMoniterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::moniter::CpuMoniterReply*
Arena::CreateMaybeMessage< ::moniter::CpuMoniterReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::moniter::CpuMoniterReply >(arena);
}
template<> PROTOBUF_NOINLINE ::moniter::DiskMoniterRequest*
Arena::CreateMaybeMessage< ::moniter::DiskMoniterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::moniter::DiskMoniterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::moniter::DiskMoniterReply*
Arena::CreateMaybeMessage< ::moniter::DiskMoniterReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::moniter::DiskMoniterReply >(arena);
}
template<> PROTOBUF_NOINLINE ::moniter::ProcessMoniterRequest*
Arena::CreateMaybeMessage< ::moniter::ProcessMoniterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::moniter::ProcessMoniterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::moniter::ProcessMoniterReply*
Arena::CreateMaybeMessage< ::moniter::ProcessMoniterReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::moniter::ProcessMoniterReply >(arena);
}
template<> PROTOBUF_NOINLINE ::moniter::SelectedProcessMoniterRequest*
Arena::CreateMaybeMessage< ::moniter::SelectedProcessMoniterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::moniter::SelectedProcessMoniterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::moniter::SelectedProcessMoniterReply*
Arena::CreateMaybeMessage< ::moniter::SelectedProcessMoniterReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::moniter::SelectedProcessMoniterReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
