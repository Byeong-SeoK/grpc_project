// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: moniter.proto

#include "moniter.pb.h"
#include "moniter.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace moniter {

static const char* MoniterService_method_names[] = {
  "/moniter.MoniterService/current_memory_moniter_method",
  "/moniter.MoniterService/current_cpu_usage_moniter_method",
  "/moniter.MoniterService/current_disk_usage_moniter_method",
};

std::unique_ptr< MoniterService::Stub> MoniterService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MoniterService::Stub> stub(new MoniterService::Stub(channel, options));
  return stub;
}

MoniterService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_current_memory_moniter_method_(MoniterService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_current_cpu_usage_moniter_method_(MoniterService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_current_disk_usage_moniter_method_(MoniterService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MoniterService::Stub::current_memory_moniter_method(::grpc::ClientContext* context, const ::moniter::MemoryRequest& request, ::moniter::MemoryReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::moniter::MemoryRequest, ::moniter::MemoryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_current_memory_moniter_method_, context, request, response);
}

void MoniterService::Stub::async::current_memory_moniter_method(::grpc::ClientContext* context, const ::moniter::MemoryRequest* request, ::moniter::MemoryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::moniter::MemoryRequest, ::moniter::MemoryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_current_memory_moniter_method_, context, request, response, std::move(f));
}

void MoniterService::Stub::async::current_memory_moniter_method(::grpc::ClientContext* context, const ::moniter::MemoryRequest* request, ::moniter::MemoryReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_current_memory_moniter_method_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::moniter::MemoryReply>* MoniterService::Stub::PrepareAsynccurrent_memory_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::MemoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::moniter::MemoryReply, ::moniter::MemoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_current_memory_moniter_method_, context, request);
}

::grpc::ClientAsyncResponseReader< ::moniter::MemoryReply>* MoniterService::Stub::Asynccurrent_memory_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::MemoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccurrent_memory_moniter_methodRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MoniterService::Stub::current_cpu_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::CpuMoniterRequest& request, ::moniter::CpuMoniterReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::moniter::CpuMoniterRequest, ::moniter::CpuMoniterReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_current_cpu_usage_moniter_method_, context, request, response);
}

void MoniterService::Stub::async::current_cpu_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::CpuMoniterRequest* request, ::moniter::CpuMoniterReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::moniter::CpuMoniterRequest, ::moniter::CpuMoniterReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_current_cpu_usage_moniter_method_, context, request, response, std::move(f));
}

void MoniterService::Stub::async::current_cpu_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::CpuMoniterRequest* request, ::moniter::CpuMoniterReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_current_cpu_usage_moniter_method_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::moniter::CpuMoniterReply>* MoniterService::Stub::PrepareAsynccurrent_cpu_usage_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::CpuMoniterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::moniter::CpuMoniterReply, ::moniter::CpuMoniterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_current_cpu_usage_moniter_method_, context, request);
}

::grpc::ClientAsyncResponseReader< ::moniter::CpuMoniterReply>* MoniterService::Stub::Asynccurrent_cpu_usage_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::CpuMoniterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccurrent_cpu_usage_moniter_methodRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MoniterService::Stub::current_disk_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::DiskMoniterRequest& request, ::moniter::DiskMoniterReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::moniter::DiskMoniterRequest, ::moniter::DiskMoniterReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_current_disk_usage_moniter_method_, context, request, response);
}

void MoniterService::Stub::async::current_disk_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::DiskMoniterRequest* request, ::moniter::DiskMoniterReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::moniter::DiskMoniterRequest, ::moniter::DiskMoniterReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_current_disk_usage_moniter_method_, context, request, response, std::move(f));
}

void MoniterService::Stub::async::current_disk_usage_moniter_method(::grpc::ClientContext* context, const ::moniter::DiskMoniterRequest* request, ::moniter::DiskMoniterReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_current_disk_usage_moniter_method_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::moniter::DiskMoniterReply>* MoniterService::Stub::PrepareAsynccurrent_disk_usage_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::DiskMoniterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::moniter::DiskMoniterReply, ::moniter::DiskMoniterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_current_disk_usage_moniter_method_, context, request);
}

::grpc::ClientAsyncResponseReader< ::moniter::DiskMoniterReply>* MoniterService::Stub::Asynccurrent_disk_usage_moniter_methodRaw(::grpc::ClientContext* context, const ::moniter::DiskMoniterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccurrent_disk_usage_moniter_methodRaw(context, request, cq);
  result->StartCall();
  return result;
}

MoniterService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MoniterService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MoniterService::Service, ::moniter::MemoryRequest, ::moniter::MemoryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MoniterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::moniter::MemoryRequest* req,
             ::moniter::MemoryReply* resp) {
               return service->current_memory_moniter_method(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MoniterService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MoniterService::Service, ::moniter::CpuMoniterRequest, ::moniter::CpuMoniterReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MoniterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::moniter::CpuMoniterRequest* req,
             ::moniter::CpuMoniterReply* resp) {
               return service->current_cpu_usage_moniter_method(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MoniterService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MoniterService::Service, ::moniter::DiskMoniterRequest, ::moniter::DiskMoniterReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MoniterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::moniter::DiskMoniterRequest* req,
             ::moniter::DiskMoniterReply* resp) {
               return service->current_disk_usage_moniter_method(ctx, req, resp);
             }, this)));
}

MoniterService::Service::~Service() {
}

::grpc::Status MoniterService::Service::current_memory_moniter_method(::grpc::ServerContext* context, const ::moniter::MemoryRequest* request, ::moniter::MemoryReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MoniterService::Service::current_cpu_usage_moniter_method(::grpc::ServerContext* context, const ::moniter::CpuMoniterRequest* request, ::moniter::CpuMoniterReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MoniterService::Service::current_disk_usage_moniter_method(::grpc::ServerContext* context, const ::moniter::DiskMoniterRequest* request, ::moniter::DiskMoniterReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace moniter

