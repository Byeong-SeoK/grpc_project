// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: moniter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_moniter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_moniter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_moniter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_moniter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_moniter_2eproto;
namespace moniter {
class MemoryReply;
struct MemoryReplyDefaultTypeInternal;
extern MemoryReplyDefaultTypeInternal _MemoryReply_default_instance_;
class MemoryRequest;
struct MemoryRequestDefaultTypeInternal;
extern MemoryRequestDefaultTypeInternal _MemoryRequest_default_instance_;
}  // namespace moniter
PROTOBUF_NAMESPACE_OPEN
template<> ::moniter::MemoryReply* Arena::CreateMaybeMessage<::moniter::MemoryReply>(Arena*);
template<> ::moniter::MemoryRequest* Arena::CreateMaybeMessage<::moniter::MemoryRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace moniter {

// ===================================================================

class MemoryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moniter.MemoryRequest) */ {
 public:
  inline MemoryRequest() : MemoryRequest(nullptr) {}
  ~MemoryRequest() override;
  explicit PROTOBUF_CONSTEXPR MemoryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryRequest(const MemoryRequest& from);
  MemoryRequest(MemoryRequest&& from) noexcept
    : MemoryRequest() {
    *this = ::std::move(from);
  }

  inline MemoryRequest& operator=(const MemoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryRequest& operator=(MemoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryRequest* internal_default_instance() {
    return reinterpret_cast<const MemoryRequest*>(
               &_MemoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MemoryRequest& a, MemoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemoryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MemoryRequest& from) {
    MemoryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moniter.MemoryRequest";
  }
  protected:
  explicit MemoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualMemoryRequestFieldNumber = 1,
    kPhysicalMemoryRequestFieldNumber = 2,
    kAvailVirtualMemoryRequestFieldNumber = 3,
    kAvailPhysicalMemoryRequestFieldNumber = 4,
  };
  // string virtual_memory_request = 1;
  void clear_virtual_memory_request();
  const std::string& virtual_memory_request() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_virtual_memory_request(ArgT0&& arg0, ArgT... args);
  std::string* mutable_virtual_memory_request();
  PROTOBUF_NODISCARD std::string* release_virtual_memory_request();
  void set_allocated_virtual_memory_request(std::string* virtual_memory_request);
  private:
  const std::string& _internal_virtual_memory_request() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_virtual_memory_request(const std::string& value);
  std::string* _internal_mutable_virtual_memory_request();
  public:

  // string physical_memory_request = 2;
  void clear_physical_memory_request();
  const std::string& physical_memory_request() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_physical_memory_request(ArgT0&& arg0, ArgT... args);
  std::string* mutable_physical_memory_request();
  PROTOBUF_NODISCARD std::string* release_physical_memory_request();
  void set_allocated_physical_memory_request(std::string* physical_memory_request);
  private:
  const std::string& _internal_physical_memory_request() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_physical_memory_request(const std::string& value);
  std::string* _internal_mutable_physical_memory_request();
  public:

  // string avail_virtual_memory_request = 3;
  void clear_avail_virtual_memory_request();
  const std::string& avail_virtual_memory_request() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avail_virtual_memory_request(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avail_virtual_memory_request();
  PROTOBUF_NODISCARD std::string* release_avail_virtual_memory_request();
  void set_allocated_avail_virtual_memory_request(std::string* avail_virtual_memory_request);
  private:
  const std::string& _internal_avail_virtual_memory_request() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avail_virtual_memory_request(const std::string& value);
  std::string* _internal_mutable_avail_virtual_memory_request();
  public:

  // string avail_physical_memory_request = 4;
  void clear_avail_physical_memory_request();
  const std::string& avail_physical_memory_request() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avail_physical_memory_request(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avail_physical_memory_request();
  PROTOBUF_NODISCARD std::string* release_avail_physical_memory_request();
  void set_allocated_avail_physical_memory_request(std::string* avail_physical_memory_request);
  private:
  const std::string& _internal_avail_physical_memory_request() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avail_physical_memory_request(const std::string& value);
  std::string* _internal_mutable_avail_physical_memory_request();
  public:

  // @@protoc_insertion_point(class_scope:moniter.MemoryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr virtual_memory_request_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr physical_memory_request_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avail_virtual_memory_request_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avail_physical_memory_request_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_moniter_2eproto;
};
// -------------------------------------------------------------------

class MemoryReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moniter.MemoryReply) */ {
 public:
  inline MemoryReply() : MemoryReply(nullptr) {}
  ~MemoryReply() override;
  explicit PROTOBUF_CONSTEXPR MemoryReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryReply(const MemoryReply& from);
  MemoryReply(MemoryReply&& from) noexcept
    : MemoryReply() {
    *this = ::std::move(from);
  }

  inline MemoryReply& operator=(const MemoryReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryReply& operator=(MemoryReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryReply* internal_default_instance() {
    return reinterpret_cast<const MemoryReply*>(
               &_MemoryReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MemoryReply& a, MemoryReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemoryReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MemoryReply& from) {
    MemoryReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moniter.MemoryReply";
  }
  protected:
  explicit MemoryReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemoryInfoReplyFieldNumber = 1,
  };
  // string memory_info_reply = 1;
  void clear_memory_info_reply();
  const std::string& memory_info_reply() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memory_info_reply(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memory_info_reply();
  PROTOBUF_NODISCARD std::string* release_memory_info_reply();
  void set_allocated_memory_info_reply(std::string* memory_info_reply);
  private:
  const std::string& _internal_memory_info_reply() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memory_info_reply(const std::string& value);
  std::string* _internal_mutable_memory_info_reply();
  public:

  // @@protoc_insertion_point(class_scope:moniter.MemoryReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memory_info_reply_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_moniter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MemoryRequest

// string virtual_memory_request = 1;
inline void MemoryRequest::clear_virtual_memory_request() {
  _impl_.virtual_memory_request_.ClearToEmpty();
}
inline const std::string& MemoryRequest::virtual_memory_request() const {
  // @@protoc_insertion_point(field_get:moniter.MemoryRequest.virtual_memory_request)
  return _internal_virtual_memory_request();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemoryRequest::set_virtual_memory_request(ArgT0&& arg0, ArgT... args) {
 
 _impl_.virtual_memory_request_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:moniter.MemoryRequest.virtual_memory_request)
}
inline std::string* MemoryRequest::mutable_virtual_memory_request() {
  std::string* _s = _internal_mutable_virtual_memory_request();
  // @@protoc_insertion_point(field_mutable:moniter.MemoryRequest.virtual_memory_request)
  return _s;
}
inline const std::string& MemoryRequest::_internal_virtual_memory_request() const {
  return _impl_.virtual_memory_request_.Get();
}
inline void MemoryRequest::_internal_set_virtual_memory_request(const std::string& value) {
  
  _impl_.virtual_memory_request_.Set(value, GetArenaForAllocation());
}
inline std::string* MemoryRequest::_internal_mutable_virtual_memory_request() {
  
  return _impl_.virtual_memory_request_.Mutable(GetArenaForAllocation());
}
inline std::string* MemoryRequest::release_virtual_memory_request() {
  // @@protoc_insertion_point(field_release:moniter.MemoryRequest.virtual_memory_request)
  return _impl_.virtual_memory_request_.Release();
}
inline void MemoryRequest::set_allocated_virtual_memory_request(std::string* virtual_memory_request) {
  if (virtual_memory_request != nullptr) {
    
  } else {
    
  }
  _impl_.virtual_memory_request_.SetAllocated(virtual_memory_request, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.virtual_memory_request_.IsDefault()) {
    _impl_.virtual_memory_request_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:moniter.MemoryRequest.virtual_memory_request)
}

// string physical_memory_request = 2;
inline void MemoryRequest::clear_physical_memory_request() {
  _impl_.physical_memory_request_.ClearToEmpty();
}
inline const std::string& MemoryRequest::physical_memory_request() const {
  // @@protoc_insertion_point(field_get:moniter.MemoryRequest.physical_memory_request)
  return _internal_physical_memory_request();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemoryRequest::set_physical_memory_request(ArgT0&& arg0, ArgT... args) {
 
 _impl_.physical_memory_request_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:moniter.MemoryRequest.physical_memory_request)
}
inline std::string* MemoryRequest::mutable_physical_memory_request() {
  std::string* _s = _internal_mutable_physical_memory_request();
  // @@protoc_insertion_point(field_mutable:moniter.MemoryRequest.physical_memory_request)
  return _s;
}
inline const std::string& MemoryRequest::_internal_physical_memory_request() const {
  return _impl_.physical_memory_request_.Get();
}
inline void MemoryRequest::_internal_set_physical_memory_request(const std::string& value) {
  
  _impl_.physical_memory_request_.Set(value, GetArenaForAllocation());
}
inline std::string* MemoryRequest::_internal_mutable_physical_memory_request() {
  
  return _impl_.physical_memory_request_.Mutable(GetArenaForAllocation());
}
inline std::string* MemoryRequest::release_physical_memory_request() {
  // @@protoc_insertion_point(field_release:moniter.MemoryRequest.physical_memory_request)
  return _impl_.physical_memory_request_.Release();
}
inline void MemoryRequest::set_allocated_physical_memory_request(std::string* physical_memory_request) {
  if (physical_memory_request != nullptr) {
    
  } else {
    
  }
  _impl_.physical_memory_request_.SetAllocated(physical_memory_request, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.physical_memory_request_.IsDefault()) {
    _impl_.physical_memory_request_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:moniter.MemoryRequest.physical_memory_request)
}

// string avail_virtual_memory_request = 3;
inline void MemoryRequest::clear_avail_virtual_memory_request() {
  _impl_.avail_virtual_memory_request_.ClearToEmpty();
}
inline const std::string& MemoryRequest::avail_virtual_memory_request() const {
  // @@protoc_insertion_point(field_get:moniter.MemoryRequest.avail_virtual_memory_request)
  return _internal_avail_virtual_memory_request();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemoryRequest::set_avail_virtual_memory_request(ArgT0&& arg0, ArgT... args) {
 
 _impl_.avail_virtual_memory_request_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:moniter.MemoryRequest.avail_virtual_memory_request)
}
inline std::string* MemoryRequest::mutable_avail_virtual_memory_request() {
  std::string* _s = _internal_mutable_avail_virtual_memory_request();
  // @@protoc_insertion_point(field_mutable:moniter.MemoryRequest.avail_virtual_memory_request)
  return _s;
}
inline const std::string& MemoryRequest::_internal_avail_virtual_memory_request() const {
  return _impl_.avail_virtual_memory_request_.Get();
}
inline void MemoryRequest::_internal_set_avail_virtual_memory_request(const std::string& value) {
  
  _impl_.avail_virtual_memory_request_.Set(value, GetArenaForAllocation());
}
inline std::string* MemoryRequest::_internal_mutable_avail_virtual_memory_request() {
  
  return _impl_.avail_virtual_memory_request_.Mutable(GetArenaForAllocation());
}
inline std::string* MemoryRequest::release_avail_virtual_memory_request() {
  // @@protoc_insertion_point(field_release:moniter.MemoryRequest.avail_virtual_memory_request)
  return _impl_.avail_virtual_memory_request_.Release();
}
inline void MemoryRequest::set_allocated_avail_virtual_memory_request(std::string* avail_virtual_memory_request) {
  if (avail_virtual_memory_request != nullptr) {
    
  } else {
    
  }
  _impl_.avail_virtual_memory_request_.SetAllocated(avail_virtual_memory_request, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.avail_virtual_memory_request_.IsDefault()) {
    _impl_.avail_virtual_memory_request_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:moniter.MemoryRequest.avail_virtual_memory_request)
}

// string avail_physical_memory_request = 4;
inline void MemoryRequest::clear_avail_physical_memory_request() {
  _impl_.avail_physical_memory_request_.ClearToEmpty();
}
inline const std::string& MemoryRequest::avail_physical_memory_request() const {
  // @@protoc_insertion_point(field_get:moniter.MemoryRequest.avail_physical_memory_request)
  return _internal_avail_physical_memory_request();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemoryRequest::set_avail_physical_memory_request(ArgT0&& arg0, ArgT... args) {
 
 _impl_.avail_physical_memory_request_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:moniter.MemoryRequest.avail_physical_memory_request)
}
inline std::string* MemoryRequest::mutable_avail_physical_memory_request() {
  std::string* _s = _internal_mutable_avail_physical_memory_request();
  // @@protoc_insertion_point(field_mutable:moniter.MemoryRequest.avail_physical_memory_request)
  return _s;
}
inline const std::string& MemoryRequest::_internal_avail_physical_memory_request() const {
  return _impl_.avail_physical_memory_request_.Get();
}
inline void MemoryRequest::_internal_set_avail_physical_memory_request(const std::string& value) {
  
  _impl_.avail_physical_memory_request_.Set(value, GetArenaForAllocation());
}
inline std::string* MemoryRequest::_internal_mutable_avail_physical_memory_request() {
  
  return _impl_.avail_physical_memory_request_.Mutable(GetArenaForAllocation());
}
inline std::string* MemoryRequest::release_avail_physical_memory_request() {
  // @@protoc_insertion_point(field_release:moniter.MemoryRequest.avail_physical_memory_request)
  return _impl_.avail_physical_memory_request_.Release();
}
inline void MemoryRequest::set_allocated_avail_physical_memory_request(std::string* avail_physical_memory_request) {
  if (avail_physical_memory_request != nullptr) {
    
  } else {
    
  }
  _impl_.avail_physical_memory_request_.SetAllocated(avail_physical_memory_request, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.avail_physical_memory_request_.IsDefault()) {
    _impl_.avail_physical_memory_request_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:moniter.MemoryRequest.avail_physical_memory_request)
}

// -------------------------------------------------------------------

// MemoryReply

// string memory_info_reply = 1;
inline void MemoryReply::clear_memory_info_reply() {
  _impl_.memory_info_reply_.ClearToEmpty();
}
inline const std::string& MemoryReply::memory_info_reply() const {
  // @@protoc_insertion_point(field_get:moniter.MemoryReply.memory_info_reply)
  return _internal_memory_info_reply();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemoryReply::set_memory_info_reply(ArgT0&& arg0, ArgT... args) {
 
 _impl_.memory_info_reply_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:moniter.MemoryReply.memory_info_reply)
}
inline std::string* MemoryReply::mutable_memory_info_reply() {
  std::string* _s = _internal_mutable_memory_info_reply();
  // @@protoc_insertion_point(field_mutable:moniter.MemoryReply.memory_info_reply)
  return _s;
}
inline const std::string& MemoryReply::_internal_memory_info_reply() const {
  return _impl_.memory_info_reply_.Get();
}
inline void MemoryReply::_internal_set_memory_info_reply(const std::string& value) {
  
  _impl_.memory_info_reply_.Set(value, GetArenaForAllocation());
}
inline std::string* MemoryReply::_internal_mutable_memory_info_reply() {
  
  return _impl_.memory_info_reply_.Mutable(GetArenaForAllocation());
}
inline std::string* MemoryReply::release_memory_info_reply() {
  // @@protoc_insertion_point(field_release:moniter.MemoryReply.memory_info_reply)
  return _impl_.memory_info_reply_.Release();
}
inline void MemoryReply::set_allocated_memory_info_reply(std::string* memory_info_reply) {
  if (memory_info_reply != nullptr) {
    
  } else {
    
  }
  _impl_.memory_info_reply_.SetAllocated(memory_info_reply, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.memory_info_reply_.IsDefault()) {
    _impl_.memory_info_reply_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:moniter.MemoryReply.memory_info_reply)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace moniter

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_moniter_2eproto
